@page "/"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

@*<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>*@

<hr>
@*
<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>*@

<div class="list-group">
    <Virtualize Items="@tweets" Context="tweet">
      <a href="#" class="list-group-item list-group-item-action flex-column align-items-start">
        <div class="d-flex w-100 justify-content-between">
          <h5 class="mb-1">@tweet.data.room</h5>
          @*<small>3 days ago</small>*@
        </div>
        <p class="mb-1">@tweet.data.enemy</p>
      </a>
    </Virtualize>
</div>

@code {
    @using RaidFinder.Data
    @using Microsoft.AspNetCore.SignalR.Client
    @using Nito.Collections

    private HubConnection? hubConnection;
    private Deque<Tweet> tweets = new(30);
    //private string? userInput;
    //private string? messageInput;
    private int capacity = 30;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/FinderHub"))
            .Build();

        hubConnection.On<Tweet>("ReceiveMessage", (Tweet tweet) =>
        {
            tweets.AddToFront(tweet);
            if (capacity == 0) 
            {
                tweets.RemoveFromBack();
            }
            else 
            {
                capacity--; 
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    //private async Task Send()
    //{
    //    if (hubConnection is not null)
    //        {
    //            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
    //        }
    //}

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}